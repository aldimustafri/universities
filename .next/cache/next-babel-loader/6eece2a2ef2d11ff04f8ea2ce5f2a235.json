{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\n/**\n * @author Aldi Mustafri\n * @email aldimustafri@live.com\n * @create date 2020-09-21 03:05:51\n * @modify date 2020-09-21 03:05:51\n * @desc [description]\n */\nimport React, { Fragment, useState } from \"react\";\nimport { Container, Form, Button, Col, Row } from \"react-bootstrap\";\nimport Axios from \"axios\";\nimport styles from \"./Newsletter.module.scss\";\nimport { ToastContainer, toast, Zoom } from \"react-toastify\";\nimport Router from \"next/router\";\n\nfunction Newsletter() {\n  var _useState = useState(),\n      name = _useState[0],\n      setName = _useState[1];\n\n  var _useState2 = useState(),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(),\n      address = _useState3[0],\n      setAddress = _useState3[1];\n\n  function handleSubmit(_x) {\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  function _handleSubmit() {\n    _handleSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var url, response, error;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              url = \"/api/newsletter\";\n              _context.prev = 2;\n              _context.next = 5;\n              return Axios.post(url, {\n                name: name,\n                email: email,\n                address: address\n              });\n\n            case 5:\n              response = _context.sent;\n\n              if (!(response.status === 200)) {\n                _context.next = 11;\n                break;\n              }\n\n              toast.dark(\"Thanks! your data added :D\", {\n                position: \"top-center\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n                transition: Zoom\n              });\n              return _context.abrupt(\"return\", Router.reload());\n\n            case 11:\n              console.log(\"Ups, Something went wrong :(\");\n              error = new Error(response.statusText);\n              error.response = response;\n              throw error;\n\n            case 15:\n              _context.next = 20;\n              break;\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](2);\n              console.log(_context.t0);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 17]]);\n    }));\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  return __jsx(Fragment, null, __jsx(Container, null, __jsx(\"div\", {\n    className: styles.card\n  }, __jsx(ToastContainer, null), __jsx(\"div\", {\n    className: styles.padding\n  }, __jsx(Form, {\n    onSubmit: handleSubmit\n  }, __jsx(Form.Row, null, __jsx(Form.Group, {\n    as: Col\n  }, __jsx(Form.Label, null, \"Name\"), __jsx(Form.Control, {\n    placeholder: \"Enter Name\",\n    onChange: function onChange(event) {\n      return setName(event.target.value);\n    },\n    required: true\n  })), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"formGridEmail\"\n  }, __jsx(Form.Label, null, \"Email\"), __jsx(Form.Control, {\n    type: \"email\",\n    placeholder: \"Enter Email\",\n    onChange: function onChange(event) {\n      return setEmail(event.target.value);\n    },\n    required: true\n  }))), __jsx(Form.Group, {\n    controlId: \"formGridAddress1\"\n  }, __jsx(Form.Label, null, \"Address\"), __jsx(Form.Control, {\n    placeholder: \"Enter Address\",\n    onChange: function onChange(event) {\n      return setAddress(event.target.value);\n    },\n    required: true\n  })), __jsx(Button, {\n    variant: \"outline-success\",\n    type: \"submit\"\n  }, \"Submit\"))))));\n}\n\nexport default Newsletter;","map":null,"metadata":{},"sourceType":"module"}